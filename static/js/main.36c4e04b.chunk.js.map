{"version":3,"sources":["serviceWorker.js","index.js"],"names":["Boolean","window","location","hostname","match","Square","props","react_default","a","createElement","className","onClick","value","Board","rows","columns","_this","this","rowsArr","_loop","x","squaresArr","_loop2","y","push","key","concat","squares","createSquares","React","Component","Game","_this2","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","history","Array","fill","stepNumber","xIsNext","stepButtons","squareID","focus","winner","squareClasses","i","slice","focusStepButton","setState","resetStepButtons","length","step","lines","_lines$i","slicedToArray","b","c","_this3","current","calculateWinner","status","moves","map","move","desc","jumpTo","calculateDraw","src_Board","handleClick","ReactDOM","render","src_Game","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.36c4e04b.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport * as serviceWorker from \"./serviceWorker.js\";\r\n\r\n//This is an element creating table cell\r\nfunction Square(props) {\r\n  return (\r\n    <button className={props.className} onClick={props.onClick}>\r\n      {props.value}\r\n    </button>\r\n  );\r\n}\r\n\r\n// This is an element creating board.\r\n//All values and handlers we will keep in the parent`s state to have one source for the game\r\n//and for the additional options.\r\nclass Board extends React.Component {\r\n  createSquares(rows, columns) {\r\n    let rowsArr = [];\r\n    for (let x = 0; x < rows; x++) {\r\n      let squaresArr = [];\r\n      for (let y = 0; y < columns; y++) {\r\n        squaresArr.push(\r\n          <Square\r\n            key={`cell#${columns * x + y}`}\r\n            value={this.props.squares[columns * x + y]}\r\n            onClick={() => this.props.onClick(columns * x + y)}\r\n            className={this.props.className[columns * x + y]}\r\n          />\r\n        );\r\n      }\r\n      rowsArr.push(\r\n        <div key={`row#${x}`} className=\"board-row\">\r\n          {squaresArr}\r\n        </div>\r\n      );\r\n    }\r\n    return rowsArr;\r\n  }\r\n\r\n  render() {\r\n    return this.createSquares(3, 3);\r\n  }\r\n}\r\n\r\nclass Game extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      history: [\r\n        {\r\n          squares: Array(9).fill(null) //this is the future values for the cells\r\n        }\r\n      ],\r\n      stepNumber: 0, //this is for the step buttons and also history array get new records\r\n      //according to the number of step\r\n      xIsNext: true, //when true player 'X' moves when false 'O' player\r\n      stepButtons: [\r\n        {\r\n          squareID: null,\r\n          focus: \"\"\r\n        }\r\n      ],\r\n      winner: null,\r\n      squareClasses: Array(9).fill(\"square\")\r\n    };\r\n  }\r\n\r\n  handleClick(i) {\r\n    const history = this.state.history.slice(0, this.state.stepNumber + 1);\r\n    const current = history[this.state.stepNumber];\r\n    const squares = current.squares.slice();\r\n    const stepButtons = this.state.stepButtons.slice(0, this.state.stepNumber + 1);\r\n\r\n    //If a player clicks on a cell in which there is already a value - highlights the button containing that move\r\n    if (squares[i]) {\r\n      focusStepButton(stepButtons, i);\r\n      this.setState({ stepButtons: stepButtons });\r\n      return;\r\n    } else {\r\n      resetStepButtons(stepButtons);\r\n      this.setState({ stepButtons: stepButtons });\r\n    }\r\n\r\n    //Blocks clickhandler if game has already ended\r\n    if (this.state.winner) {\r\n      return;\r\n    }\r\n    //Push new {squares: array} containing 'x' or 'o' in the certain cell to history array\r\n    squares[i] = this.state.xIsNext ? \"X\" : \"O\";\r\n    this.setState({\r\n      history: history.concat([\r\n        {\r\n          squares: squares\r\n        }\r\n      ]),\r\n      //Incerease step number and change player's turn\r\n      stepNumber: history.length,\r\n      xIsNext: !this.state.xIsNext,\r\n      stepButtons: stepButtons.concat([\r\n        {\r\n          squareID: i,\r\n          focus: \"\"\r\n        }\r\n      ])\r\n    });\r\n  }\r\n\r\n  //This is for step buttons that change the moment of the game.\r\n  jumpTo(step) {\r\n    this.setState({\r\n      stepNumber: step,\r\n      xIsNext: step % 2 === 0,\r\n      winner: null,\r\n      squareClasses: Array(9).fill(\"square\")\r\n    });\r\n  }\r\n\r\n  /* This function checks if there are three values of \"x\" or \"o\" in a row or column.\r\n  It takes last history array as an attribute and searches equal 'x' or 'o' values in certain cells.\r\n  And if it find - it sets winner to the state and also adds extra class 'winner' which pass with props\r\n  to the Sqare component.\r\n  */\r\n  calculateWinner(squares) {\r\n    if (!this.state.winner) {\r\n      const lines = [\r\n        [0, 1, 2],\r\n        [3, 4, 5],\r\n        [6, 7, 8],\r\n        [0, 3, 6],\r\n        [1, 4, 7],\r\n        [2, 5, 8],\r\n        [0, 4, 8],\r\n        [2, 4, 6]\r\n      ];\r\n      for (let i = 0; i < lines.length; i++) {\r\n        const [a, b, c] = lines[i];\r\n        if (\r\n          squares[a] &&\r\n          squares[a] === squares[b] &&\r\n          squares[a] === squares[c]\r\n        ) {\r\n          const squareClasses = this.state.squareClasses.slice();\r\n          squareClasses[a] = squareClasses[b] = squareClasses[c] =\r\n            \"square winner\";\r\n          this.setState({\r\n            squareClasses: squareClasses,\r\n            winner: squares[a]\r\n          });\r\n          return;\r\n        }\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n\r\n  calculateDraw(squares) {\r\n    if (this.state.winner) {\r\n      return;\r\n    }\r\n    for (let i = squares.length - 1; i >= 0; i--) {\r\n      if (!squares[i]) {\r\n        return true;\r\n      }\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const history = this.state.history.slice(0, this.state.stepNumber + 1);\r\n    const current = history[this.state.stepNumber];\r\n    const winner = this.state.winner;\r\n    const stepButtons = this.state.stepButtons;\r\n\r\n    this.calculateWinner(current.squares);\r\n\r\n    //For rendering step buttons\r\n    const moves = history.map((step, move) => {\r\n      const desc = move ? `Перейти к ходу #${move}` : \"К началу игры\";\r\n      return (\r\n        <li key={move}>\r\n          <button\r\n            onClick={() => this.jumpTo(move)}\r\n            className={stepButtons[move].focus}\r\n          >\r\n            {desc}\r\n          </button>\r\n        </li>\r\n      );\r\n    });\r\n\r\n    let status;\r\n    if (winner) {\r\n      status = \"Выиграл \" + winner;\r\n    } else if (!this.calculateDraw(current.squares)) {\r\n      status = \"Ничья\";\r\n    } else {\r\n      status = \"Следующий ход: \" + (this.state.xIsNext ? \"X\" : \"O\");\r\n    }\r\n\r\n    return (\r\n      <div className=\"game\">\r\n        <div className=\"status\">{status}</div>\r\n        <div className=\"game-board\">\r\n          <Board\r\n            squares={current.squares}\r\n            onClick={i => this.handleClick(i)}\r\n            className={this.state.squareClasses}\r\n          />\r\n        </div>\r\n        <ul>{moves}</ul>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst focusStepButton = (stepButtons, i) => {\r\n  for (let x = stepButtons.length - 1; x >= 0; x--) {\r\n    if (stepButtons[x].squareID === i) {\r\n      stepButtons[x] = {\r\n        squareID: i,\r\n        focus: \"focus\"\r\n      };\r\n    } else {\r\n      stepButtons[x] = {\r\n        squareID: stepButtons[x].squareID,\r\n        focus: \"\"\r\n      };\r\n    }\r\n  }\r\n};\r\n\r\nconst resetStepButtons = stepButtons => {\r\n  for (let x = stepButtons.length - 1; x >= 0; x--) {\r\n    stepButtons[x] = {\r\n      squareID: stepButtons[x].squareID,\r\n      focus: \"\"\r\n    };\r\n  }\r\n};\r\n\r\n// ========================================\r\n\r\nReactDOM.render(<Game />, document.getElementById(\"root\"));\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}